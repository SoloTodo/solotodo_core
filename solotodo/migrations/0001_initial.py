# -*- coding: utf-8 -*-
# Generated by Django 1.11.3 on 2017-10-17 12:34
from __future__ import unicode_literals

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import storages.backends.s3boto3


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('metamodel', '0016_auto_20170920_2002'),
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='SoloTodoUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('email', models.EmailField(db_index=True, max_length=255, unique=True, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('first_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='last name')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
            ],
            options={
                'verbose_name': 'SoloTodo User',
                'ordering': ('-date_joined',),
                'verbose_name_plural': 'SoloTodo Users',
                'permissions': (('view_users', 'Can view all users'), ('view_users_with_staff_actions', 'Can view users with that have executed staff actions')),
            },
        ),
        migrations.CreateModel(
            name='ApiClient',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('url', models.URLField()),
            ],
            options={
                'ordering': ('name',),
                'permissions': [('view_api_client_leads', 'View the leads associated to this API client')],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255, unique=True)),
                ('slug', models.SlugField(blank=True, null=True)),
                ('storescraper_name', models.CharField(blank=True, db_index=True, max_length=255, null=True)),
                ('suggested_alternatives_ordering', models.CharField(blank=True, max_length=255, null=True)),
                ('suggested_alternatives_filter', models.CharField(blank=True, max_length=255, null=True)),
                ('similar_products_fields', models.CharField(blank=True, max_length=255, null=True)),
                ('search_bucket_key_fields', models.CharField(blank=True, max_length=255, null=True)),
                ('detail_bucket_key_fields', models.CharField(blank=True, max_length=255, null=True)),
                ('meta_model', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='metamodel.MetaModel')),
            ],
            options={
                'ordering': ['name'],
                'permissions': (['view_category', 'Can view the category'], ['view_category_stocks', 'Can view the category entities stock (also requires store permissions)'], ['is_category_staff', 'Is staff of the category (may also require other permissions)'], ['update_category_pricing', "Can update the pricing of the category's entities"], ['view_category_leads', 'View the leads associated to this category'], ('backend_list_categories', 'View category list in backend')),
            },
        ),
        migrations.CreateModel(
            name='CategorySpecsFilter',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('type', models.CharField(choices=[('exact', 'Exact'), ('gte', 'Greater than or equal'), ('lte', 'Less than or equal'), ('range', 'Range (from / to)')], max_length=20)),
                ('es_field', models.CharField(max_length=100)),
                ('value_field', models.CharField(blank=True, max_length=100, null=True)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solotodo.Category')),
                ('meta_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='metamodel.MetaModel')),
            ],
            options={
                'ordering': ('category', 'name'),
            },
        ),
        migrations.CreateModel(
            name='CategorySpecsOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('es_field', models.CharField(max_length=100)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solotodo.Category')),
            ],
            options={
                'ordering': ('category', 'name'),
            },
        ),
        migrations.CreateModel(
            name='CategoryTier',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('creation_payment_amount', models.DecimalField(decimal_places=0, max_digits=5)),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('iso_code', models.CharField(max_length=2)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Currency',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255)),
                ('iso_code', models.CharField(max_length=10)),
                ('decimal_places', models.IntegerField()),
                ('prefix', models.CharField(default='$', max_length=10)),
                ('exchange_rate', models.DecimalField(decimal_places=2, max_digits=8)),
                ('exchange_rate_last_updated', models.DateTimeField()),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='Entity',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('condition', models.URLField(choices=[('https://schema.org/DamagedCondition', 'Damaged'), ('https://schema.org/NewCondition', 'New'), ('https://schema.org/RefurbishedCondition', 'Refurbished'), ('https://schema.org/UsedCondition', 'Used')])),
                ('name', models.CharField(db_index=True, max_length=256)),
                ('cell_plan_name', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('part_number', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('sku', models.CharField(blank=True, db_index=True, max_length=50, null=True)),
                ('ean', models.CharField(blank=True, max_length=13, null=True, verbose_name='EAN-13')),
                ('key', models.CharField(db_index=True, max_length=256)),
                ('url', models.URLField(db_index=True, max_length=512)),
                ('discovery_url', models.URLField(db_index=True, max_length=512)),
                ('picture_urls', models.TextField(blank=True, null=True)),
                ('description', models.TextField(null=True)),
                ('is_visible', models.BooleanField(default=True)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('last_association', models.DateTimeField(blank=True, null=True)),
                ('last_staff_access', models.DateTimeField(blank=True, null=True)),
                ('last_staff_change', models.DateTimeField(blank=True, null=True)),
                ('last_pricing_update', models.DateTimeField()),
            ],
            options={
                'ordering': ('creation_date',),
                'permissions': [('backend_list_entities', 'Can view entity list in backend'), ('backend_view_entity_conflicts', 'Can view entity conflicts in backend'), ('backend_view_entity_estimated_sales', 'Can view the entity estiamted sales interface in backend')],
            },
        ),
        migrations.CreateModel(
            name='EntityHistory',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('stock', models.IntegerField(db_index=True)),
                ('normal_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('offer_price', models.DecimalField(decimal_places=2, max_digits=12)),
                ('cell_monthly_payment', models.DecimalField(blank=True, decimal_places=2, max_digits=12, null=True)),
                ('entity', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solotodo.Entity')),
            ],
            options={
                'ordering': ['entity', 'timestamp'],
            },
        ),
        migrations.CreateModel(
            name='EntityLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('condition', models.URLField(choices=[('https://schema.org/DamagedCondition', 'Damaged'), ('https://schema.org/NewCondition', 'New'), ('https://schema.org/RefurbishedCondition', 'Refurbished'), ('https://schema.org/UsedCondition', 'Used')])),
                ('name', models.CharField(max_length=256)),
                ('cell_plan_name', models.CharField(max_length=50, null=True)),
                ('part_number', models.CharField(max_length=50, null=True)),
                ('sku', models.CharField(max_length=50, null=True)),
                ('ean', models.CharField(blank=True, max_length=13, null=True, verbose_name='EAN-13')),
                ('url', models.URLField(max_length=512)),
                ('discovery_url', models.URLField(max_length=512)),
                ('picture_urls', models.TextField(null=True)),
                ('description', models.TextField(null=True)),
                ('is_visible', models.BooleanField()),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solotodo.Category')),
            ],
            options={
                'ordering': ('entity', 'creation_date'),
            },
        ),
        migrations.CreateModel(
            name='Language',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
                ('code', models.CharField(max_length=10)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Lead',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField()),
                ('ip', models.GenericIPAddressField()),
                ('api_client', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solotodo.ApiClient')),
                ('entity_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solotodo.EntityHistory')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ('entity_history', 'timestamp'),
                'permissions': (('view_leads_user_data', 'Can view the IP and user associated to all leads'), ('backend_list_leads', 'Can view list of leads in the backend')),
            },
        ),
        migrations.CreateModel(
            name='NumberFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10)),
                ('thousands_separator', models.CharField(max_length=3)),
                ('decimal_separator', models.CharField(max_length=3)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('creation_date', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('creator', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('instance_model', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='metamodel.InstanceModel')),
            ],
            options={
                'ordering': ('instance_model',),
                'permissions': [('backend_list_products', 'Can view product list in backend')],
            },
        ),
        migrations.CreateModel(
            name='Store',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(db_index=True, max_length=255, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('storescraper_class', models.CharField(db_index=True, max_length=255)),
                ('storescraper_extra_args', models.CharField(blank=True, max_length=255, null=True)),
                ('country', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solotodo.Country')),
            ],
            options={
                'ordering': ['name'],
                'permissions': (['view_store', 'Can view the store'], ['view_store_update_logs', 'Can view the store update logs'], ['view_store_stocks', 'Can view the store entities stock (also requires category permissions)'], ['update_store_pricing', 'Can update the store pricing'], ['is_store_staff', 'Is staff of the store (may require additional permissions)'], ('view_store_leads', 'View the leads associated to this store'), ['backend_list_stores', 'Can view store list in backend']),
            },
        ),
        migrations.CreateModel(
            name='StoreType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'ordering': ('name',),
            },
        ),
        migrations.CreateModel(
            name='StoreUpdateLog',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.IntegerField(choices=[(1, 'Pending'), (2, 'In process'), (3, 'Success'), (4, 'Error')], default=1)),
                ('creation_date', models.DateTimeField(auto_now_add=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('discovery_url_concurrency', models.IntegerField(blank=True, null=True)),
                ('products_for_url_concurrency', models.IntegerField(blank=True, null=True)),
                ('use_async', models.NullBooleanField()),
                ('registry_file', models.FileField(blank=True, null=True, storage=storages.backends.s3boto3.S3Boto3Storage(default_acl='private'), upload_to='logs/scrapings')),
                ('available_products_count', models.IntegerField(blank=True, null=True)),
                ('unavailable_products_count', models.IntegerField(blank=True, null=True)),
                ('discovery_urls_without_products_count', models.IntegerField(blank=True, null=True)),
                ('categories', models.ManyToManyField(to='solotodo.Category')),
                ('store', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solotodo.Store')),
            ],
            options={
                'ordering': ['store', '-creation_date'],
            },
        ),
        migrations.AddField(
            model_name='store',
            name='type',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solotodo.StoreType'),
        ),
        migrations.AddField(
            model_name='entitylog',
            name='cell_plan',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='solotodo.Product'),
        ),
        migrations.AddField(
            model_name='entitylog',
            name='currency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solotodo.Currency'),
        ),
        migrations.AddField(
            model_name='entitylog',
            name='entity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solotodo.Entity'),
        ),
        migrations.AddField(
            model_name='entitylog',
            name='product',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='solotodo.Product'),
        ),
        migrations.AddField(
            model_name='entitylog',
            name='scraped_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='solotodo.Category'),
        ),
        migrations.AddField(
            model_name='entitylog',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entity',
            name='active_registry',
            field=models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='solotodo.EntityHistory'),
        ),
        migrations.AddField(
            model_name='entity',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solotodo.Category'),
        ),
        migrations.AddField(
            model_name='entity',
            name='cell_plan',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to='solotodo.Product'),
        ),
        migrations.AddField(
            model_name='entity',
            name='currency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solotodo.Currency'),
        ),
        migrations.AddField(
            model_name='entity',
            name='last_association_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entity',
            name='last_pricing_update_user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entity',
            name='last_staff_access_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entity',
            name='last_staff_change_user',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='+', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='entity',
            name='product',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='solotodo.Product'),
        ),
        migrations.AddField(
            model_name='entity',
            name='scraped_category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='solotodo.Category'),
        ),
        migrations.AddField(
            model_name='entity',
            name='store',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solotodo.Store'),
        ),
        migrations.AddField(
            model_name='country',
            name='currency',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solotodo.Currency'),
        ),
        migrations.AddField(
            model_name='country',
            name='number_format',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='solotodo.NumberFormat'),
        ),
        migrations.AddField(
            model_name='category',
            name='tier',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='solotodo.CategoryTier'),
        ),
        migrations.AddField(
            model_name='solotodouser',
            name='preferred_country',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='solotodo.Country'),
        ),
        migrations.AddField(
            model_name='solotodouser',
            name='preferred_currency',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='solotodo.Currency'),
        ),
        migrations.AddField(
            model_name='solotodouser',
            name='preferred_language',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='solotodo.Language'),
        ),
        migrations.AddField(
            model_name='solotodouser',
            name='preferred_number_format',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='solotodo.NumberFormat'),
        ),
        migrations.AddField(
            model_name='solotodouser',
            name='preferred_store',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='solotodo.Store'),
        ),
        migrations.AddField(
            model_name='solotodouser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.AlterUniqueTogether(
            name='entity',
            unique_together=set([('store', 'key')]),
        ),
    ]
